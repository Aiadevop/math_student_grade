#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para procesar datos del formulario Next.js de an√°lisis educativo
"""

import json
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# Configurar estilo para gr√°ficos
plt.style.use('default')
sns.set_palette("husl")

def cargar_datos_ejemplo():
    """
    Cargar datos de ejemplo del formulario Next.js (ya transformados)
    """
    datos_ejemplo = {
        "reading_score": 85.5,
        "writing_score": 78.2,
        "lunch": 1,  # standard = 1, free/reduced = 0
        "race_ethnicity_group_E": 0,  # group E = 1, otros = 0
        "test_preparation_course": 1,  # completed = 1, none = 0
        "gender": 0,  # male = 1, female = 0
        "parental_level_of_education_high_school": 0  # high school = 1, otros = 0
    }
    return datos_ejemplo

def cargar_datos_desde_json(archivo_json):
    """
    Cargar datos desde un archivo JSON exportado por el formulario Next.js
    """
    try:
        with open(archivo_json, 'r', encoding='utf-8') as f:
            datos = json.load(f)
        return datos
    except FileNotFoundError:
        print(f"‚ùå Error: No se encontr√≥ el archivo {archivo_json}")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå Error: El archivo {archivo_json} no es un JSON v√°lido")
        return None

def mostrar_transformacion_datos(datos):
    """
    Mostrar c√≥mo se transformaron los datos originales
    """
    print("\nüîÑ TRANSFORMACI√ìN DE DATOS:")
    print("-" * 40)
    print("Datos originales ‚Üí Datos num√©ricos:")
    print(f"reading_score: {datos['reading_score']} (num√©rico 0-100)")
    print(f"writing_score: {datos['writing_score']} (num√©rico 0-100)")
    print(f"lunch: {datos['lunch']} (0=free/reduced, 1=standard)")
    print(f"test_preparation_course: {datos['test_preparation_course']} (0=none, 1=completed)")
    print(f"gender: {datos['gender']} (0=female, 1=male)")
    print(f"race_ethnicity_group_E: {datos['race_ethnicity_group_E']} (0=otros, 1=group E)")
    print(f"parental_level_of_education_high_school: {datos['parental_level_of_education_high_school']} (0=otros, 1=high school)")

def procesar_datos_formulario(datos):
    """
    Procesar los datos del formulario y realizar an√°lisis b√°sico
    """
    print("=" * 60)
    print("üìä AN√ÅLISIS DE DATOS EDUCATIVOS - FORMULARIO NEXT.JS")
    print("=" * 60)
    
    # Convertir a DataFrame
    df = pd.DataFrame([datos])
    
    # Mostrar datos
    print("\nüìã DATOS DEL FORMULARIO:")
    print("-" * 40)
    for columna, valor in datos.items():
        print(f"{columna}: {valor}")
    
    # An√°lisis de puntuaciones
    print("\nüìà AN√ÅLISIS DE PUNTUACIONES:")
    print("-" * 40)
    reading_score = float(datos['reading_score'])
    writing_score = float(datos['writing_score'])
    
    print(f"Puntuaci√≥n de lectura: {reading_score}")
    print(f"Puntuaci√≥n de escritura: {writing_score}")
    print(f"Promedio: {(reading_score + writing_score) / 2:.2f}")
    
    # An√°lisis de rendimiento
    rendimiento_lectura = "Excelente" if reading_score >= 90 else \
                         "Bueno" if reading_score >= 80 else \
                         "Promedio" if reading_score >= 70 else "Necesita mejorar"
    
    rendimiento_escritura = "Excelente" if writing_score >= 90 else \
                           "Bueno" if writing_score >= 80 else \
                           "Promedio" if writing_score >= 70 else "Necesita mejorar"
    
    print(f"\nüéØ EVALUACI√ìN DE RENDIMIENTO:")
    print("-" * 40)
    print(f"Lectura: {rendimiento_lectura}")
    print(f"Escritura: {rendimiento_escritura}")
    
    # An√°lisis demogr√°fico
    print(f"\nüë• AN√ÅLISIS DEMOGR√ÅFICO:")
    print("-" * 40)
    print(f"G√©nero: {'Masculino' if datos['gender'] == 1 else 'Femenino'}")
    print(f"Grupo √©tnico: {'Grupo E' if datos['race_ethnicity_group_E'] == 1 else 'Otros grupos'}")
    print(f"Tipo de almuerzo: {'Est√°ndar' if datos['lunch'] == 1 else 'Gratuito/Reducido'}")
    print(f"Nivel educativo de los padres: {'Secundaria completa' if datos['parental_level_of_education_high_school'] == 1 else 'Otros niveles'}")
    print(f"Curso de preparaci√≥n: {'Completado' if datos['test_preparation_course'] == 1 else 'Ninguno'}")
    
    return df

def generar_recomendaciones(datos):
    """
    Generar recomendaciones basadas en los datos
    """
    print(f"\nüí° RECOMENDACIONES:")
    print("-" * 40)
    
    reading_score = float(datos['reading_score'])
    writing_score = float(datos['writing_score'])
    
    # Recomendaciones basadas en puntuaciones
    if reading_score < 80:
        print("üìñ Considera tomar clases adicionales de lectura")
    
    if writing_score < 80:
        print("‚úçÔ∏è Practica m√°s la escritura y composici√≥n")
    
    if datos['test_preparation_course'] == 0:
        print("üìö Considera tomar un curso de preparaci√≥n para mejorar tus puntuaciones")
    
    # Recomendaciones espec√≠ficas por nivel educativo de los padres
    if datos['parental_level_of_education_high_school'] == 0:
        print("üéì Considera buscar apoyo adicional para compensar la falta de experiencia universitaria en casa")
    
    # Recomendaciones generales
    print("üéØ Mant√©n un horario de estudio consistente")
    print("üìù Practica regularmente con ejercicios de lectura y escritura")
    print("üë• Participa en grupos de estudio para mejorar el aprendizaje")

def crear_visualizacion(datos):
    """
    Crear visualizaci√≥n de los datos
    """
    try:
        # Crear figura con subplots
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìä An√°lisis Educativo - Formulario Next.js', fontsize=16, fontweight='bold')
        
        # Gr√°fico 1: Puntuaciones por materia
        materias = ['Lectura', 'Escritura']
        puntuaciones = [float(datos['reading_score']), float(datos['writing_score'])]
        colores = ['#3B82F6', '#8B5CF6']
        
        bars = ax1.bar(materias, puntuaciones, color=colores, alpha=0.7)
        ax1.set_title('üìä Puntuaciones por Materia', fontsize=14, fontweight='bold')
        ax1.set_ylabel('Puntuaci√≥n')
        ax1.set_ylim(0, 100)
        
        # Agregar valores en las barras
        for bar, puntuacion in zip(bars, puntuaciones):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{puntuacion}', ha='center', va='bottom', fontweight='bold')
        
        # Gr√°fico 2: Gr√°fico de radar para caracter√≠sticas
        categorias = ['Lectura', 'Escritura', 'Preparaci√≥n', 'Apoyo Familiar']
        valores = [
            float(datos['reading_score']) / 100,
            float(datos['writing_score']) / 100,
            1.0 if datos['test_preparation_course'] == 'completed' else 0.3,
            0.8  # Valor estimado para apoyo familiar
        ]
        
        # Cerrar el gr√°fico de radar
        valores += valores[:1]
        categorias += categorias[:1]
        
        angles = np.linspace(0, 2 * np.pi, len(categorias), endpoint=False).tolist()
        angles += angles[:1]
        
        ax2.plot(angles, valores, 'o-', linewidth=2, color='#667eea')
        ax2.fill(angles, valores, alpha=0.25, color='#667eea')
        ax2.set_xticks(angles[:-1])
        ax2.set_xticklabels(categorias[:-1])
        ax2.set_ylim(0, 1)
        ax2.set_title('üéØ Perfil del Estudiante', fontsize=14, fontweight='bold')
        
        # Gr√°fico 3: Distribuci√≥n de caracter√≠sticas demogr√°ficas
        demograficas = ['G√©nero', 'Grupo √âtnico', 'Tipo Almuerzo', 'Preparaci√≥n']
        valores_demo = [
            datos['gender'],
            datos['race_ethnicity_group_E'],
            datos['lunch'],
            datos['test_preparation_course']
        ]
        
        ax3.barh(demograficas, valores_demo, color=['#10B981', '#F59E0B', '#EF4444', '#8B5CF6'])
        ax3.set_title('üë• Caracter√≠sticas Demogr√°ficas', fontsize=14, fontweight='bold')
        ax3.set_xlim(0, 1)
        
        # Gr√°fico 4: Comparaci√≥n con est√°ndares
        estandares = ['Excelente\n(90-100)', 'Bueno\n(80-89)', 'Promedio\n(70-79)', 'Mejorar\n(<70)']
        reading_level = 0 if reading_score >= 90 else 1 if reading_score >= 80 else 2 if reading_score >= 70 else 3
        writing_level = 0 if writing_score >= 90 else 1 if writing_score >= 80 else 2 if writing_score >= 70 else 3
        
        x = np.arange(len(estandares))
        width = 0.35
        
        ax4.bar(x - width/2, [1 if i == reading_level else 0 for i in range(4)], width, label='Lectura', color='#3B82F6')
        ax4.bar(x + width/2, [1 if i == writing_level else 0 for i in range(4)], width, label='Escritura', color='#8B5CF6')
        
        ax4.set_title('üìà Nivel de Rendimiento', fontsize=14, fontweight='bold')
        ax4.set_xticks(x)
        ax4.set_xticklabels(estandares)
        ax4.legend()
        
        plt.tight_layout()
        plt.savefig('analisis_educativo_nextjs.png', dpi=300, bbox_inches='tight')
        print(f"\nüìä Gr√°fico guardado como 'analisis_educativo_nextjs.png'")
        
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo crear la visualizaci√≥n: {e}")

def exportar_datos(datos, formato='json'):
    """
    Exportar datos en diferentes formatos
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if formato == 'json':
        filename = f'datos_educativos_nextjs_{timestamp}.json'
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(datos, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ Datos exportados como JSON: {filename}")
    
    elif formato == 'csv':
        filename = f'datos_educativos_nextjs_{timestamp}.csv'
        df = pd.DataFrame([datos])
        df.to_csv(filename, index=False, encoding='utf-8')
        print(f"\nüíæ Datos exportados como CSV: {filename}")

def analisis_estadistico(datos):
    """
    Realizar an√°lisis estad√≠stico b√°sico
    """
    print(f"\nüìä AN√ÅLISIS ESTAD√çSTICO:")
    print("-" * 40)
    
    reading_score = float(datos['reading_score'])
    writing_score = float(datos['writing_score'])
    
    # Estad√≠sticas b√°sicas
    promedio = (reading_score + writing_score) / 2
    diferencia = abs(reading_score - writing_score)
    
    print(f"Promedio general: {promedio:.2f}")
    print(f"Diferencia entre materias: {diferencia:.2f}")
    print(f"Rendimiento relativo: {'Lectura' if reading_score > writing_score else 'Escritura'}")
    
    # An√°lisis de correlaci√≥n (simulado)
    if reading_score > 80 and writing_score > 80:
        print("‚úÖ Alto rendimiento en ambas materias")
    elif reading_score < 70 or writing_score < 70:
        print("‚ö†Ô∏è Necesita apoyo en al menos una materia")
    else:
        print("üìà Rendimiento moderado, con potencial de mejora")

def main():
    """
    Funci√≥n principal
    """
    print("üöÄ Iniciando an√°lisis de datos educativos - Formulario Next.js...")
    
    # Buscar archivos JSON en el directorio actual
    json_files = list(Path('.').glob('datos_educativos_*.json'))
    
    if json_files:
        print(f"üìÅ Encontrados {len(json_files)} archivos de datos:")
        for i, file in enumerate(json_files, 1):
            print(f"  {i}. {file.name}")
        
        # Usar el archivo m√°s reciente
        latest_file = max(json_files, key=lambda x: x.stat().st_mtime)
        print(f"\nüìÇ Usando archivo m√°s reciente: {latest_file.name}")
        datos = cargar_datos_desde_json(latest_file)
    else:
        print("üìù No se encontraron archivos JSON, usando datos de ejemplo")
        datos = cargar_datos_ejemplo()
    
    if datos:
        # Mostrar transformaci√≥n de datos
        mostrar_transformacion_datos(datos)
        
        # Procesar datos
        df = procesar_datos_formulario(datos)
        
        # Generar recomendaciones
        generar_recomendaciones(datos)
        
        # An√°lisis estad√≠stico
        analisis_estadistico(datos)
        
        # Crear visualizaci√≥n
        crear_visualizacion(datos)
        
        # Exportar datos
        exportar_datos(datos, 'json')
        exportar_datos(datos, 'csv')
        
        print("\n" + "=" * 60)
        print("‚úÖ An√°lisis completado exitosamente")
        print("=" * 60)
    else:
        print("‚ùå No se pudieron cargar los datos")

if __name__ == "__main__":
    main()
